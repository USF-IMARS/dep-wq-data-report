---
title: "Parameters Report"
code-fold: true
---

```{R} 
#| label: import libraries & functions
#| code-summary: (code) import libraries & functions
#| message: false
#| warning: false

if (!requireNamespace("librarian", quietly = TRUE)) {
  # If not installed, install the package
  install.packages("librarian")
}

librarian::shelf(
  glue,
  quarto
)
source("R/getData.R")
```

# Parameters

Available parameters:

```{R}
#| label: view unique paramters
#| code-summary: (code) view unique parameters
data <- getData()
# print unique values in `Parameter` column
unique_parameters <- unique(data$Parameter)
print(unique_parameters)

# NOTE: this ran for 20min and never finished
# # create a violin plot of `Value` grouped by each `Parameter`
# ggplot2::ggplot(df, aes(x=Parameter, y=Value)) +
#     geom_violin(trim=FALSE) +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#     labs(title="Violin Plot of Values by Parameter",
#          x="Parameter",
#          y="Value")
```

Render a report for each parameter:
```{R}
#| label: render wq param reports
#| code-summary: (code) render wq param reports
#| include: false  # supress quarto messages
library(purrr)
library(here)

# Assuming `unique_parameters` is a vector, convert it to a dataframe
params_df <- tibble::tibble(parameter_name = unique_parameters)

# Define the wrapper function for quarto_render
render_quarto <- function(parameter_name) {
  message(paste("Rendering for", parameter_name)) # Printing message
  filepath <- paste0("parameter_report_", parameter_name, ".html")
  
  quarto::quarto_render(
    input = here::here("parameter_report_template.qmd"), 
    output_format = "html",
    execute_params = list(parameter_name = parameter_name),
    output_file = filepath
    # You might adjust execute_dir if needed, based on your project structure
  )
}

# Use pwalk to apply the function across each row of the dataframe
pwalk(list(params_df), render_quarto, .progress = interactive())

# === alternative: ==========================================
# for (wq_param in unique_parameters) {
#   print(paste("rendering for ", wq_param))
#   params = list(
#     parameter_name = wq_param
#   )
# 
#   filepath = paste("parameter_report_", params$parameter_name, ".html", sep = "")
#   
#   # NOTE: this is 
#   quarto::quarto_render(input = "_parameter_analysis.qmd", 
#                  output_format = "html", 
#                  execute_params = params,
#                  output_file = filepath,
#                  # execute_dir = "./"
#   )
# }
```

```{R}
#| label: print wq report links
#| code-summary: (code) view wq report links
#| results: asis  # passthrough html+markdown
for (wq_param in unique_parameters) {
  # NOTE: this line is copied from last loop
  filepath = paste("parameter_report_", wq_param, ".html", sep = "")

  print(glue::glue("* [{filepath}](./{filepath}) \n"))
}
```
