---
title: "Silica"
format: html
#echo: false
code-fold: true
warning: false
params: 
  parameter_name: "Silica"
execute: 
  cache: true
---

# `r params$parameter_name` Report

```{R}
#| label: setup

if (!requireNamespace("librarian", quietly = TRUE)) {
  # If not installed, install the package
  install.packages("librarian")
}

librarian::shelf(
  glue,
  here,
  skimr,
  ggplot2
)

source(here("R/getData.R"))
data <- getData()
parameter_name <- params$parameter_name
```

```{R}
#| code-summary: apply param bounds
bounds <- read.csv(here("parameter_bounds.csv"), stringsAsFactors = FALSE, strip.white = T)
lower_bound <- bounds$min[bounds$param == parameter_name]
upper_bound <- bounds$max[bounds$param == parameter_name]

filter_condition <- (data$Parameter == parameter_name & (data$Value < lower_bound | data$Value > upper_bound))

data <- dplyr::filter(
  data, 
  !filter_condition
)

print(glue("{sum(filter_condition)} rows dropped as < {lower_bound} or > {upper_bound}"))
```

```{R}
#| code-summary: write cleaned DataFrame to a file
write.csv(data, here("data/df_cleaned.csv"), row.names = FALSE)
```


```{R}
#| code-summary: load data & skim
subset_data <- subset(data, Parameter == parameter_name)
print(skimr::skim(subset_data))

```

```{R}
#| code-summary: create `params$parameter_name` histogram
ggplot2::ggplot(subset_data, aes(x=Value)) +
    geom_histogram(bins=30, fill="blue", color="black") +
    scale_y_log10() +  # Transform the y-axis to a logarithmic scale
    labs(title=paste("Histogram of Values for", params$parameter_name),
         x="Value",
         y="Log Frequency") +
    theme_minimal()
```