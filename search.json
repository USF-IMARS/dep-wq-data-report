[
  {
    "objectID": "parameter_report_template.html",
    "href": "parameter_report_template.html",
    "title": "Silica",
    "section": "",
    "text": "Silica Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n0 rows dropped as &lt; 0 or &gt; 20\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             19611      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   4     0        5          0\n2 Site                   0             1   1  25     0      385          0\n3 Parameter              0             1   6   6     0        1          0\n4 Units                  0             1   3   9     0        4          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        8          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd         p0\n 1 ...1                      0         1     407925.    14513.    392245    \n 2 Latitude                  0         1         26.0       0.755     24.2  \n 3 Longitude                 0         1        -80.5       0.672    -83.5  \n 4 Month                     0         1          6.69      3.43       1    \n 5 Year                      0         1       2016.        6.58    1995    \n 6 Value                     0         1          0.190     0.510      0    \n 7 Total Depth           17145         0.126      5.69      6.28       0.444\n 8 Sample Depth             82         0.996      3.19      6.95       0    \n 9 Start Date                0         1       2009.       10.2     1988    \n10 verbatimValue             0         1          0.190     0.510      0    \n11 VerbatimLatitude          0         1         26.0       0.755     24.2  \n12 verbatimLongitude         0         1        -80.5       0.672    -83.5  \n13 Value_orig                0         1          0.190     0.510      0    \n          p25        p50        p75     p100 hist \n 1 401906.    407240     412142.    717204   ▇▁▁▁▁\n 2     25.5       26.0       26.5       27.8 ▃▃▇▃▂\n 3    -81.1      -80.1      -80.1      -80.0 ▁▁▁▂▇\n 4      4          7         10         12   ▇▅▅▆▇\n 5   2016       2019       2021       2022   ▁▁▁▁▇\n 6      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n 7      2.5        3.7        6.7       52.7 ▇▁▁▁▁\n 8      0          0.5        3.2       54.5 ▇▁▁▁▁\n 9   1998       2016       2016       2016   ▁▃▁▁▇\n10      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n11     25.5       26.0       26.5       27.8 ▃▃▇▃▂\n12    -81.1      -80.1      -80.1      -80.0 ▁▁▁▂▇\n13      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "sites_qc.html",
    "href": "sites_qc.html",
    "title": "Sites QC",
    "section": "",
    "text": "Code\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  dplyr,\n  glue,\n  ggplot2,\n  here,\n  skimr,\n)\n\nsource(here(\"R/getData.R\"))\n\n\n\n\nload data & skim\ndf &lt;- getRawData()\n\n\nNew names:\n• `` -&gt; `...1`\n\n\nWarning in getRawData(): NAs introduced by coercion\n\n\nload data & skim\nprint(skimr::skim(df))\n\n\n── Data Summary ────────────────────────\n                           Values\nName                       df    \nNumber of rows             612830\nNumber of columns          17    \n_______________________          \nColumn type frequency:           \n  character                10    \n  numeric                  7     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n   skim_variable  n_missing complete_rate min max empty n_unique whitespace\n 1 Source                 0         1       3  11     0        9          0\n 2 Site                   0         1       1  28     0     1411          0\n 3 Latitude            5462         0.991   8   8     0     4739          0\n 4 Longitude           5496         0.991   9   9     0     5495          0\n 5 Parameter              0         1       6  24     0       11          0\n 6 Units                968         0.998   2   9     0       13          0\n 7 Trend Analysis       154         1.00    2   3     0        2          0\n 8 Continuous           154         1.00    2   3     0        2          0\n 9 End Date             154         1.00    4   7     0       15          0\n10 Value_orig         29273         0.952   1  13     0    88595          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate       mean          sd           p0\n1 ...1                  0         1      360506.     206864.              1\n2 Month                63         1.00        6.54        3.43            1\n3 Year                 63         1.00     2012.          7.92         1995\n4 Value             34262         0.944 -193965.   46216162.   -11111111110\n5 Total Depth      345777         0.436      10.2        10.1             0\n6 Sample Depth     132515         0.784       3.62       13.4             0\n7 Start Date          154         1.00     1999.         11.1          1988\n         p25       p50        p75    p100 hist \n1 182543.    365608.   537934.    717536  ▇▇▇▇▇\n2      4          7        10         12  ▇▅▅▅▇\n3   2006       2013      2019       2022  ▂▃▅▃▇\n4      0.004      0.02      0.233   8800  ▁▁▁▁▇\n5      3.75       7.3      12        121. ▇▁▁▁▁\n6      0.5        0.5       3.2     2494  ▇▁▁▁▁\n7   1988       1998      2005       2022  ▇▃▃▁▃\n\n\n\n\nfunction for plotting sites histogram\nsite_histogram &lt;- function(df){\n  number_of_unique_sites &lt;- df %&gt;% summarise(unique_sites = dplyr::n_distinct(Site))\n\n  site_counts &lt;- df %&gt;%\n    group_by(Site) %&gt;%\n    summarise(Count = n())\n  \n  ggplot(site_counts, aes(x = Count)) +\n    geom_histogram(binwidth = 1, fill = \"blue\", color = \"black\") +\n    labs(title = glue(\"Histogram of Rows Per Site (total sites: {number_of_unique_sites})\"),\n         x = \"Number of Rows\",\n         y = \"Number of Sites\") +\n    theme_minimal()\n}\n\n\n\n\nshow initial sites setup\nsite_histogram(df)\n\n\n\n\n\n\n\ndrop rows without Year, Value, Lat, or Lon\ndf &lt;- df %&gt;%\n  filter(!is.na(Year) & !is.na(Value) & !is.na(Latitude) & !is.na(Longitude))\n\nsite_histogram(df)\n\n\n\n\n\n\n\nremove sites with &lt; 20 data points\ndf &lt;- df %&gt;%\n  group_by(Site) %&gt;%\n  filter(n() &gt;= 20) %&gt;%\n  ungroup()  # It's a good practice to ungroup data after operations like this\n\nsite_histogram(df)\n\n\n\n\n\n\n\nremove sites with no data since last two years (2022)\n# TODO: should calculate \"last two years\" from latest date in the data\nlatest_year &lt;- max(df$Year)\n\nggplot(df, aes(x = Year)) +\n  geom_histogram(binwidth = 1, fill = \"blue\", color = \"black\") +\n  labs(title = \"N Rows per year\",\n       x = \"Year\",\n       y = \"N Rows\") +\n  theme_minimal()\n\n\n\n\n\nremove sites with no data since last two years (2022)\nsites_with_recent_data &lt;- df %&gt;%\n  filter(Year &gt; latest_year-2) %&gt;%  # Filter for rows with Year greater than 2022\n  distinct(Site)           # Get unique sites that meet the criteria\n\ndf &lt;- df %&gt;%\n  semi_join(sites_with_recent_data, by = \"Site\")  # Keep rows where 'Site' matches those in the recent data list\n\nsite_histogram(df)\n\n\n\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(df, \"data/df_cleaned.csv\", row.names = FALSE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "parameter_reports/Chlorophyll a.html",
    "href": "parameter_reports/Chlorophyll a.html",
    "title": "Chlorophyll a",
    "section": "",
    "text": "Chlorophyll a Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n4 rows dropped as &lt; 0 or &gt; 75\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             36765      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   7     0        8          0\n2 Site                   0             1   1  28     0      456          0\n3 Parameter              0             1  13  13     0        1          0\n4 Units                  0             1   4   4     0        2          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        9          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate     mean        sd     p0      p25\n 1 ...1                      0         1     23172.   25831.       1   11288   \n 2 Latitude                  0         1        25.5      0.708   24.4    24.8 \n 3 Longitude                 0         1       -80.7      0.718  -83.5   -81.3 \n 4 Month                     0         1         6.70     3.45     1       4   \n 5 Year                      0         1      2013.       7.71  1995    2008   \n 6 Value                     0         1         1.44     3.02     0       0.28\n 7 Total Depth           25612         0.303     7.45     7.56     0       2.83\n 8 Sample Depth           6468         0.824     1.18    19.9      0       0   \n 9 Start Date                0         1      2001.      10.4   1988    1988   \n10 verbatimValue             0         1         1.44     3.02     0       0.28\n11 VerbatimLatitude          0         1        25.5      0.708   24.4    24.8 \n12 verbatimLongitude         0         1       -80.7      0.718  -83.5   -81.3 \n13 Value_orig                0         1         1.44     3.02     0       0.28\n        p50      p75     p100 hist \n 1 21955    31683    717453   ▇▁▁▁▁\n 2    25.5     25.9      27.8 ▇▆▇▂▁\n 3   -80.4    -80.1     -80.0 ▁▁▂▃▇\n 4     7       10        12   ▇▅▅▅▇\n 5  2016     2021      2022   ▂▂▃▃▇\n 6     0.52     1.40     70.9 ▇▁▁▁▁\n 7     5        9.61    121.  ▇▁▁▁▁\n 8     0.5      0.5    2494   ▇▁▁▁▁\n 9  1998     2006      2021   ▇▆▆▁▆\n10     0.52     1.40     70.9 ▇▁▁▁▁\n11    25.5     25.9      27.8 ▇▆▇▂▁\n12   -80.4    -80.1     -80.0 ▁▁▂▃▇\n13     0.52     1.40     70.9 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Nitrate-Nitrite (N).html",
    "href": "parameter_reports/Nitrate-Nitrite (N).html",
    "title": "Nitrate-Nitrite (N)",
    "section": "",
    "text": "Nitrate-Nitrite (N) Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n5 rows dropped as &lt; 0 or &gt; 8\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             33490      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0         1       3  11     0        9          0\n2 Site                   0         1       1  20     0      409          0\n3 Parameter              0         1      19  19     0        1          0\n4 Units                  0         1       2   4     0        4          0\n5 Trend Analysis        33         0.999   2   3     0        2          0\n6 Continuous            33         0.999   2   3     0        2          0\n7 End Date              33         0.999   4   7     0        7          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd       p0\n 1 ...1                      0        1      187441.    22944.    159038  \n 2 Latitude                  0        1          26.0       0.469     24.4\n 3 Longitude                 0        1         -80.2       0.245    -83.5\n 4 Month                     0        1           6.62      3.47       1  \n 5 Year                      0        1        2017.        4.88    2005  \n 6 Value                     0        1           0.197     0.655      0  \n 7 Total Depth           32791        0.0209      9.14      9.12       0.9\n 8 Sample Depth          18387        0.451       4.52     29.0        0  \n 9 Start Date               33        0.999    2010.        5.73    1988  \n10 verbatimValue             0        1           0.197     0.655      0  \n11 VerbatimLatitude          0        1          26.0       0.469     24.4\n12 verbatimLongitude         0        1         -80.2       0.245    -83.5\n13 Value_orig                0        1           0.197     0.655      0  \n          p25         p50      p75     p100 hist \n 1 175488.    185112.     193484.  717201   ▇▁▁▁▁\n 2     25.7       25.9        26.2     27.8 ▁▅▇▂▁\n 3    -80.3      -80.2       -80.1    -80.0 ▁▁▁▁▇\n 4      4          7          10       12   ▇▅▅▅▇\n 5   2014       2019        2021     2022   ▂▁▂▃▇\n 6      0.007      0.0152      0.1      7.2 ▇▁▁▁▁\n 7      4.75       6.4         8.5     52.7 ▇▁▁▁▁\n 8      0.5        0.5         4.7   2494   ▇▁▁▁▁\n 9   2005       2006        2016     2022   ▁▁▇▁▇\n10      0.007      0.0152      0.1      7.2 ▇▁▁▁▁\n11     25.7       25.9        26.2     27.8 ▁▅▇▂▁\n12    -80.3      -80.2       -80.1    -80.0 ▁▁▁▁▇\n13      0.007      0.0152      0.1      7.2 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Phosphorus- Total.html",
    "href": "parameter_reports/Phosphorus- Total.html",
    "title": "Phosphorus- Total",
    "section": "",
    "text": "Phosphorus- Total Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n29 rows dropped as &lt; 0 or &gt; 2\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             48466      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0         1       3  11     0        7          0\n2 Site                   0         1       1  28     0      450          0\n3 Parameter              0         1      17  17     0        1          0\n4 Units                  0         1       4   6     0        5          0\n5 Trend Analysis        35         0.999   2   3     0        2          0\n6 Continuous            35         0.999   2   3     0        2          0\n7 End Date              35         0.999   4   7     0        4          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate        mean         sd         p0\n 1 ...1                      0         1     591012.     19131.     562016    \n 2 Latitude                  0         1         25.7        0.638      24.5  \n 3 Longitude                 0         1        -80.4        0.515     -82.6  \n 4 Month                     0         1          6.61       3.43        1    \n 5 Year                      0         1       2015.         6.58     1995    \n 6 Value                     0         1          0.0185     0.0337      0    \n 7 Total Depth           36276         0.252      7.57       7.66        0    \n 8 Sample Depth          20219         0.583      2.66      21.3         0.002\n 9 Start Date               35         0.999   2005.        10.7      1988    \n10 verbatimValue             0         1          0.0185     0.0337      0    \n11 VerbatimLatitude          0         1         25.7        0.638      24.5  \n12 verbatimLongitude         0         1        -80.4        0.515     -82.6  \n13 Value_orig                0         1          0.0185     0.0337      0    \n            p25        p50        p75     p100 hist \n 1 576427.      589018.    601595.    638286   ▇▇▇▂▂\n 2     25.4         25.8       26.0       27.2 ▃▃▇▃▂\n 3    -80.4        -80.2      -80.1      -80.0 ▁▁▁▁▇\n 4      4            7         10         12   ▇▅▅▆▇\n 5   2011         2018       2020       2022   ▁▁▂▂▇\n 6      0.00561      0.011      0.017      1.6 ▇▁▁▁▁\n 7      3            5.05       9.5      121.  ▇▁▁▁▁\n 8      0.5          0.5        0.5     2494   ▇▁▁▁▁\n 9   2005         2005       2016       2022   ▅▁▇▁▇\n10      0.00561      0.011      0.017      1.6 ▇▁▁▁▁\n11     25.4         25.8       26.0       27.2 ▃▃▇▃▂\n12    -80.4        -80.2      -80.1      -80.0 ▁▁▁▁▇\n13      0.00561      0.011      0.017      1.6 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Orthophosphate (P).html",
    "href": "parameter_reports/Orthophosphate (P).html",
    "title": "Orthophosphate (P)",
    "section": "",
    "text": "Orthophosphate (P) Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n11 rows dropped as &lt; 0 or &gt; 10\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             30036      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   7     0        5          0\n2 Site                   0             1   1   7     0      352          0\n3 Parameter              0             1  18  18     0        1          0\n4 Units                  0             1   4   6     0        3          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        8          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate         mean         sd       p0\n 1 ...1                      0        1      375587.      12258.     350803  \n 2 Latitude                  0        1          26.0         0.525      24.4\n 3 Longitude                 0        1         -80.2         0.309     -83.5\n 4 Month                     0        1           6.57        3.46        1  \n 5 Year                      0        1        2017.          4.92     1998  \n 6 Value                     0        1           0.00682     0.0135      0  \n 7 Total Depth           29349        0.0229      9.11        9.05        0.9\n 8 Sample Depth          14760        0.509       3.93        7.60        0  \n 9 Start Date                0        1        2010.          5.96     1998  \n10 verbatimValue             0        1           0.00682     0.0135      0  \n11 VerbatimLatitude          0        1          26.0         0.525      24.4\n12 verbatimLongitude         0        1         -80.2         0.309     -83.5\n13 Value_orig                0        1           0.00682     0.0135      0  \n          p25        p50        p75       p100 hist \n 1 367776.    376048.    383557.    717205     ▇▁▁▁▁\n 2     25.7       25.9       26.3       27.8   ▁▅▇▂▁\n 3    -80.3      -80.2      -80.1      -80.0   ▁▁▁▁▇\n 4      4          7         10         12     ▇▅▅▆▇\n 5   2014       2019       2021       2022     ▁▁▂▂▇\n 6      0.002      0.004      0.005      0.584 ▇▁▁▁▁\n 7      4.9        6.4        8.35      52.7   ▇▁▁▁▁\n 8      0.5        0.5        4.4       54.5   ▇▁▁▁▁\n 9   2005       2006       2016       2022     ▁▇▁▇▁\n10      0.002      0.004      0.005      0.584 ▇▁▁▁▁\n11     25.7       25.9       26.3       27.8   ▁▅▇▂▁\n12    -80.3      -80.2      -80.1      -80.0   ▁▁▁▁▇\n13      0.002      0.004      0.005      0.584 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Nitrogen- Total Kjeldahl.html",
    "href": "parameter_reports/Nitrogen- Total Kjeldahl.html",
    "title": "Nitrogen- Total Kjeldahl",
    "section": "",
    "text": "Nitrogen- Total Kjeldahl Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n4 rows dropped as &lt; 0 or &gt; 5\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             36420      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0          1      3  11     0        7          0\n2 Site                   0          1      1  28     0      443          0\n3 Parameter              0          1     24  24     0        1          0\n4 Units                  0          1      4   6     0        3          0\n5 Trend Analysis         6          1.00   2   3     0        2          0\n6 Continuous             6          1.00   2   3     0        2          0\n7 End Date               6          1.00   4   7     0        4          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd       p0\n 1 ...1                      0         1     515326.    16523.    492530  \n 2 Latitude                  0         1         25.7       0.715     24.5\n 3 Longitude                 0         1        -80.5       0.588    -82.6\n 4 Month                     0         1          6.55      3.42       1  \n 5 Year                      0         1       2015.        7.23    1995  \n 6 Value                     0         1          0.280     0.347      0  \n 7 Total Depth           24988         0.314      7.66      7.03       0  \n 8 Sample Depth          10950         0.699      4.22     22.7        0  \n 9 Start Date                6         1.00    2004.       11.8     1988  \n10 verbatimValue             0         1          0.280     0.347      0  \n11 VerbatimLatitude          0         1         25.7       0.715     24.5\n12 verbatimLongitude         0         1        -80.5       0.588    -82.6\n13 Value_orig                0         1          0.280     0.347      0  \n         p25        p50       p75      p100 hist \n 1 502848.   511952.    524278.   562015    ▇▇▃▂▁\n 2     25.0      25.8       26.1      27.2  ▆▃▇▃▂\n 3    -80.5     -80.2      -80.1     -80.0  ▁▁▁▁▇\n 4      3         7          9        12    ▇▅▆▆▇\n 5   2011      2018       2020      2022    ▁▁▂▂▇\n 6      0.08      0.155      0.33      4.94 ▇▁▁▁▁\n 7      3         5.5       10       104.   ▇▁▁▁▁\n 8      0.5       0.5        5      2494    ▇▁▁▁▁\n 9   1988      2005       2016      2022    ▆▁▆▁▇\n10      0.08      0.155      0.33      4.94 ▇▁▁▁▁\n11     25.0      25.8       26.1      27.2  ▆▃▇▃▂\n12    -80.5     -80.2      -80.1     -80.0  ▁▁▁▁▇\n13      0.08      0.155      0.33      4.94 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Nitrate (N).html",
    "href": "parameter_reports/Nitrate (N).html",
    "title": "Nitrate (N)",
    "section": "",
    "text": "Nitrate (N) Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n1 rows dropped as &lt; 0 or &gt; 10\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             2074       \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   4     0        4          0\n2 Site                   0             1   1  21     0      165          0\n3 Parameter              0             1  11  11     0        1          0\n4 Units                  0             1   4   6     0        2          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        4          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate        mean        sd       p0\n 1 ...1                      0         1     317876.     46702.    307064  \n 2 Latitude                  0         1         25.8        0.866     24.4\n 3 Longitude                 0         1        -81.0        0.877    -83.5\n 4 Month                     0         1          7.26       3.40       1  \n 5 Year                      0         1       2017.         3.61    2005  \n 6 Value                     0         1          0.0181     0.165      0  \n 7 Total Depth            1379         0.335      9.08       9.02       0.9\n 8 Sample Depth             28         0.986      1.04       2.54       0  \n 9 Start Date                0         1       2004.         8.59    1988  \n10 verbatimValue             0         1          0.0181     0.165      0  \n11 VerbatimLatitude          0         1         25.8        0.866     24.4\n12 verbatimLongitude         0         1        -81.0        0.877    -83.5\n13 Value_orig                0         1          0.0181     0.165      0  \n         p25      p50       p75      p100 hist \n 1 310844.   312844.  314306.   717203    ▇▁▁▁▁\n 2     25.2      25.7     26.3      27.8  ▅▇▃▁▃\n 3    -81.5     -81.1    -80.1     -80.1  ▁▁▃▆▇\n 4      4         8       10        12    ▅▃▃▅▇\n 5   2016      2017     2019      2022    ▁▂▁▇▃\n 6      0         0        0         4.09 ▇▁▁▁▁\n 7      4.65      6.1      8.35     52.7  ▇▁▁▁▁\n 8      0         0        0.5      16.9  ▇▁▁▁▁\n 9   1998      1998     2016      2016    ▁▇▁▁▅\n10      0         0        0         4.09 ▇▁▁▁▁\n11     25.2      25.7     26.3      27.8  ▅▇▃▁▃\n12    -81.5     -81.1    -80.1     -80.1  ▁▁▃▆▇\n13      0         0        0         4.09 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "provider_sites_report.html",
    "href": "provider_sites_report.html",
    "title": "Sites Report",
    "section": "",
    "text": "A summary of which sites meet quality assessment checks to be included in the final map.\n\n\n(code) import libraries, functions, & data\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  ggplot2,\n  dplyr\n)\nsource(\"R/getData.R\")\n\n\n\n\nshow unique providers\nunique_sources &lt;- unique(data$Source)\nprint(unique_sources)\n\n\n[1] \"AOML\"        \"DERM\"        \"BROWARD\"     \"DEP\"         \"FIU\"        \n[6] \"21FLWQA\"     \"BBAP\"        \"Miami Beach\" \"BBWW\"       \n\n\n\n\nshow % of clean data per site\n# Count for raw dataframe\nraw_counts &lt;- getRawData() %&gt;%\n  group_by(Source) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;%\n  mutate(Condition = \"Before Cleaning\")\n\n\nNew names:\n• `` -&gt; `...1`\n\n\nWarning in getRawData(): NAs introduced by coercion\n\n\nshow % of clean data per site\n# Count for cleaned dataframe\ncleaned_counts &lt;- getData() %&gt;%\n  group_by(Source) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;%\n  mutate(Condition = \"After Cleaning\")\n\ncombined_counts &lt;- bind_rows(raw_counts, cleaned_counts)\n\nggplot(combined_counts, aes(x = Source, y = Count, fill = Condition)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Number of Rows Per Source Before and After Cleaning\",\n       x = \"Source\",\n       y = \"Number of Rows\",\n       fill = \"Condition\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dep-wq-data-report",
    "section": "",
    "text": "This collection of reports summarizes data provided by the Florida Department of Environmental Protection.\nThe recommended quality control cleaning steps are applied and explained.\nReports are generated\n\nfor each Water Quality (WQ) parameter\nshowing rows provided by each data provider\nrecommended quality control filtering across all sites\ndetails on the data files provided\n\nThe cleaned version of this data is fed into the FL DEP WQ Dashboard for site-by-site exploration."
  },
  {
    "objectID": "parameter_reports/Nitrite (N).html",
    "href": "parameter_reports/Nitrite (N).html",
    "title": "Nitrite (N)",
    "section": "",
    "text": "Nitrite (N) Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n3 rows dropped as &lt; 0 or &gt; 0.5\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             13444      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   4     0        4          0\n2 Site                   0             1   1  22     0      272          0\n3 Parameter              0             1  11  11     0        1          0\n4 Units                  0             1   4   6     0        2          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        5          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate         mean          sd       p0\n 1 ...1                      0        1      261571.      18502.      248164  \n 2 Latitude                  0        1          26.3         0.552       24.4\n 3 Longitude                 0        1         -80.2         0.456      -83.5\n 4 Month                     0        1           6.58        3.49         1  \n 5 Year                      0        1        2020.          2.16      2005  \n 6 Value                     0        1           0.00300     0.00904      0  \n 7 Total Depth           12727        0.0533      9.16        9.00         0.9\n 8 Sample Depth             21        0.998       4.41        7.99         0  \n 9 Start Date                0        1        2015.          4.80      1988  \n10 verbatimValue             0        1           0.00300     0.00904      0  \n11 VerbatimLatitude          0        1          26.3         0.552       24.4\n12 verbatimLongitude         0        1         -80.2         0.456      -83.5\n13 Value_orig                0        1           0.00300     0.00904      0  \n          p25        p50        p75       p100 hist \n 1 257613.    260974.    264334.    717202     ▇▁▁▁▁\n 2     25.9       26.3       26.7       27.8   ▁▂▇▅▂\n 3    -80.1      -80.1      -80.1      -80.0   ▁▁▁▁▇\n 4      3          7         10         12     ▇▅▅▅▇\n 5   2019       2020       2021       2022     ▁▁▁▂▇\n 6      0.002      0.002      0.004      0.365 ▇▁▁▁▁\n 7      4.9        6.4        8.5       52.7   ▇▁▁▁▁\n 8      0.5        0.5        5.6       54.5   ▇▁▁▁▁\n 9   2016       2016       2016       2016     ▁▁▁▁▇\n10      0.002      0.002      0.004      0.365 ▇▁▁▁▁\n11     25.9       26.3       26.7       27.8   ▁▂▇▅▂\n12    -80.1      -80.1      -80.1      -80.0   ▁▁▁▁▇\n13      0.002      0.002      0.004      0.365 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Nitrogen- Total.html",
    "href": "parameter_reports/Nitrogen- Total.html",
    "title": "Nitrogen- Total",
    "section": "",
    "text": "Nitrogen- Total Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n1 rows dropped as &lt; 0 or &gt; 6\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             18845      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   7     0        4          0\n2 Site                   0             1   1  28     0      301          0\n3 Parameter              0             1  15  15     0        1          0\n4 Units                  0             1   4   6     0        3          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   3   3     0        1          0\n7 End Date               0             1   4   7     0        2          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd       p0\n 1 ...1                      0         1     465203.    10626.    451097  \n 2 Latitude                  0         1         25.1       0.604     24.5\n 3 Longitude                 0         1        -80.9       0.698    -82.6\n 4 Month                     0         1          6.67      3.38       1  \n 5 Year                      0         1       2011.        8.15    1995  \n 6 Value                     0         1          0.367     0.460      0  \n 7 Total Depth            4721         0.749      8.10      7.79       0  \n 8 Sample Depth           2729         0.855      3.36      6.25       0  \n 9 Start Date                0         1       1994.        9.32    1988  \n10 verbatimValue             0         1          0.367     0.460      0  \n11 VerbatimLatitude          0         1         25.1       0.604     24.5\n12 verbatimLongitude         0         1        -80.9       0.698    -82.6\n13 Value_orig                0         1          0.367     0.460      0  \n          p25        p50        p75      p100 hist \n 1 455998     463095     474265     492483    ▇▆▃▃▁\n 2     24.6       24.9       25.5       27.2  ▇▃▂▁▁\n 3    -81.5      -80.6      -80.3      -80.1  ▁▂▃▂▇\n 4      4          7         10         12    ▇▅▅▆▇\n 5   2005       2012       2019       2022    ▃▃▅▃▇\n 6      0.138      0.197      0.363      5.53 ▇▁▁▁▁\n 7      3.01       5.82      10        121.   ▇▁▁▁▁\n 8      0.5        0.5        4        121.   ▇▁▁▁▁\n 9   1988       1988       2005       2022    ▇▁▂▁▁\n10      0.138      0.197      0.363      5.53 ▇▁▁▁▁\n11     24.6       24.9       25.5       27.2  ▇▃▂▁▁\n12    -81.5      -80.6      -80.3      -80.1  ▁▂▃▂▇\n13      0.138      0.197      0.363      5.53 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Silica.html",
    "href": "parameter_reports/Silica.html",
    "title": "Silica",
    "section": "",
    "text": "Silica Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n0 rows dropped as &lt; 0 or &gt; 20\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             19611      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0             1   3   4     0        5          0\n2 Site                   0             1   1  25     0      385          0\n3 Parameter              0             1   6   6     0        1          0\n4 Units                  0             1   3   9     0        4          0\n5 Trend Analysis         0             1   2   3     0        2          0\n6 Continuous             0             1   2   3     0        2          0\n7 End Date               0             1   4   7     0        8          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd         p0\n 1 ...1                      0         1     407925.    14513.    392245    \n 2 Latitude                  0         1         26.0       0.755     24.2  \n 3 Longitude                 0         1        -80.5       0.672    -83.5  \n 4 Month                     0         1          6.69      3.43       1    \n 5 Year                      0         1       2016.        6.58    1995    \n 6 Value                     0         1          0.190     0.510      0    \n 7 Total Depth           17145         0.126      5.69      6.28       0.444\n 8 Sample Depth             82         0.996      3.19      6.95       0    \n 9 Start Date                0         1       2009.       10.2     1988    \n10 verbatimValue             0         1          0.190     0.510      0    \n11 VerbatimLatitude          0         1         26.0       0.755     24.2  \n12 verbatimLongitude         0         1        -80.5       0.672    -83.5  \n13 Value_orig                0         1          0.190     0.510      0    \n          p25        p50        p75     p100 hist \n 1 401906.    407240     412142.    717204   ▇▁▁▁▁\n 2     25.5       26.0       26.5       27.8 ▃▃▇▃▂\n 3    -81.1      -80.1      -80.1      -80.0 ▁▁▁▂▇\n 4      4          7         10         12   ▇▅▅▆▇\n 5   2016       2019       2021       2022   ▁▁▁▁▇\n 6      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n 7      2.5        3.7        6.7       52.7 ▇▁▁▁▁\n 8      0          0.5        3.2       54.5 ▇▁▁▁▁\n 9   1998       2016       2016       2016   ▁▃▁▁▇\n10      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n11     25.5       26.0       26.5       27.8 ▃▃▇▃▂\n12    -81.1      -80.1      -80.1      -80.0 ▁▁▁▂▇\n13      0.014      0.032      0.180     19.4 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Ammonium (N).html",
    "href": "parameter_reports/Ammonium (N).html",
    "title": "Ammonium (N)",
    "section": "",
    "text": "Ammonium (N) Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n5 rows dropped as &lt; 0 or &gt; 6\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             35039      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0         1       3  11     0        8          0\n2 Site                   0         1       1  28     0      397          0\n3 Parameter              0         1      12  12     0        1          0\n4 Units                  0         1       4   6     0        4          0\n5 Trend Analysis        18         0.999   2   3     0        2          0\n6 Continuous            18         0.999   2   3     0        2          0\n7 End Date              18         0.999   4   7     0        8          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate       mean        sd       p0\n 1 ...1                      0        1      100676.    23993.    72314   \n 2 Latitude                  0        1          25.9       0.490    24.2 \n 3 Longitude                 0        1         -80.3       0.271   -83.5 \n 4 Month                     0        1           6.58      3.44      1   \n 5 Year                      0        1        2016.        5.12   1998   \n 6 Value                     0        1           0.114     0.266     0   \n 7 Total Depth           34306        0.0209      8.99      9.05      0.77\n 8 Sample Depth          19214        0.452       4.32     28.3       0   \n 9 Start Date               18        0.999    2010.        5.91   1988   \n10 verbatimValue             0        1           0.114     0.266     0   \n11 VerbatimLatitude          0        1          25.9       0.490    24.2 \n12 verbatimLongitude         0        1         -80.3       0.271   -83.5 \n13 Value_orig                0        1           0.114     0.266     0   \n        p25        p50       p75      p100 hist \n 1 89018.   99386      108148.   717200    ▇▁▁▁▁\n 2    25.5     25.8        26.2      27.6  ▁▃▇▂▁\n 3   -80.4    -80.2       -80.1     -80.0  ▁▁▁▁▇\n 4     4        7          10        12    ▇▅▅▆▇\n 5  2013     2018        2020      2022    ▁▁▂▂▇\n 6     0.01     0.0347      0.11      5.43 ▇▁▁▁▁\n 7     4.6      6.1         8.5      62.2  ▇▁▁▁▁\n 8     0.5      0.5         4.4    2494    ▇▁▁▁▁\n 9  2005     2005        2016      2022    ▁▁▇▁▆\n10     0.01     0.0347      0.11      5.43 ▇▁▁▁▁\n11    25.5     25.8        26.2      27.6  ▁▃▇▂▁\n12   -80.4    -80.2       -80.1     -80.0  ▁▁▁▁▇\n13     0.01     0.0347      0.11      5.43 ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "parameter_reports/Turbidity.html",
    "href": "parameter_reports/Turbidity.html",
    "title": "Turbidity",
    "section": "",
    "text": "Turbidity Report\n\n\nCode\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  here,\n  skimr,\n  ggplot2\n)\n\nsource(here(\"R/getData.R\"))\ndata &lt;- getData()\nparameter_name &lt;- params$parameter_name\n\n\n\n\napply param bounds\nbounds &lt;- read.csv(here(\"parameter_bounds.csv\"), stringsAsFactors = FALSE, strip.white = T)\nlower_bound &lt;- bounds$min[bounds$param == parameter_name]\nupper_bound &lt;- bounds$max[bounds$param == parameter_name]\n\nfilter_condition &lt;- (data$Parameter == parameter_name & (data$Value &lt; lower_bound | data$Value &gt; upper_bound))\n\ndata &lt;- dplyr::filter(\n  data, \n  !filter_condition\n)\n\nprint(glue(\"{sum(filter_condition)} rows dropped as &lt; {lower_bound} or &gt; {upper_bound}\"))\n\n\n4 rows dropped as &lt; 0 or &gt; 200\n\n\n\n\nwrite cleaned DataFrame to a file\nwrite.csv(data, here(\"data/df_cleaned.csv\"), row.names = FALSE)\n\n\n\n\nload data & skim\nsubset_data &lt;- subset(data, Parameter == parameter_name)\nprint(skimr::skim(subset_data))\n\n\n── Data Summary ────────────────────────\n                           Values     \nName                       subset_data\nNumber of rows             54438      \nNumber of columns          20         \n_______________________               \nColumn type frequency:                \n  character                7          \n  numeric                  13         \n________________________              \nGroup variables            None       \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate min max empty n_unique whitespace\n1 Source                 0         1       3  11     0        6          0\n2 Site                   0         1       1  28     0      438          0\n3 Parameter              0         1       9   9     0        1          0\n4 Units                 40         0.999   3   4     0        2          0\n5 Trend Analysis        59         0.999   2   3     0        2          0\n6 Continuous            59         0.999   2   3     0        2          0\n7 End Date              59         0.999   4   7     0        4          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable     n_missing complete_rate      mean        sd       p0\n 1 ...1                      0         1     670881.   20627.    638288  \n 2 Latitude                  0         1         25.6      0.667     24.5\n 3 Longitude                 0         1        -80.5      0.596    -82.6\n 4 Month                     0         1          6.58     3.43       1  \n 5 Year                      0         1       2014.       7.00    1995  \n 6 Value                     0         1          1.24     2.61       0  \n 7 Total Depth           36138         0.336      8.41     7.94       0  \n 8 Sample Depth          21197         0.611      4.02     7.22       0  \n 9 Start Date               59         0.999   2003.      11.3     1988  \n10 verbatimValue             0         1          1.24     2.61       0  \n11 VerbatimLatitude          0         1         25.6      0.667     24.5\n12 verbatimLongitude         0         1        -80.5      0.596    -82.6\n13 Value_orig                0         1          1.24     2.61       0  \n         p25        p50       p75     p100 hist \n 1 654488.   668504.    683877.   716036   ▇▇▇▅▃\n 2     25.0      25.7       25.9      27.2 ▆▃▇▃▂\n 3    -80.5     -80.2      -80.1     -80.0 ▁▁▁▁▇\n 4      4         7         10        12   ▇▅▅▆▇\n 5   2009      2016       2020      2022   ▁▁▃▃▇\n 6      0.3       0.643      1.29    177   ▇▁▁▁▁\n 7      3.25      6.08      10.5     121.  ▇▁▁▁▁\n 8      0.5       0.5        5       121.  ▇▁▁▁▁\n 9   1988      2005       2016      2022   ▇▁▇▁▆\n10      0.3       0.643      1.29    177   ▇▁▁▁▁\n11     25.0      25.7       25.9      27.2 ▆▃▇▃▂\n12    -80.5     -80.2      -80.1     -80.0 ▁▁▁▁▇\n13      0.3       0.643      1.29    177   ▇▁▁▁▁\n\n\n\n\ncreate params$parameter_name histogram\nggplot2::ggplot(subset_data, aes(x=Value)) +\n    geom_histogram(bins=30, fill=\"blue\", color=\"black\") +\n    scale_y_log10() +  # Transform the y-axis to a logarithmic scale\n    labs(title=paste(\"Histogram of Values for\", params$parameter_name),\n         x=\"Value\",\n         y=\"Log Frequency\") +\n    theme_minimal()"
  },
  {
    "objectID": "data_details.html",
    "href": "data_details.html",
    "title": "Data Details",
    "section": "",
    "text": "(code) import libraries & functions\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  readr,\n  skimr,\n  glue,\n  ggplot2,\n  quarto\n)\nsource(\"R/getData.R\")\n\n\nThere are three relevant types of data file provided:\n\n\n(code) preview the raw data\ninspectData &lt;- function(fpath){\n  print(fpath)\n  df &lt;- readr::read_csv(fpath)\n  print(head(df))\n}\n\ninspectData(\"data/station_sampling_periods_for_all_programs.csv\")\n\n\n[1] \"data/station_sampling_periods_for_all_programs.csv\"\n\n\nRows: 998 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Source, Site, Currently Sampling?, Notes\ndbl (4): Lat, Long, Sample Start Year, Sample End Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 6 × 8\n  Source Site    Lat  Long `Sample Start Year` `Sample End Year`\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1 DERM   AC01   25.9 -80.1                2015              2021\n2 DERM   AC03   25.9 -80.2                2015              2021\n3 DERM   AC06   25.9 -80.2                2015              2021\n4 DERM   AR03   25.3 -80.4                2015              2021\n5 DERM   BB02   25.9 -80.1                2015              2021\n6 DERM   BB04   25.9 -80.1                2015              2021\n# ℹ 2 more variables: `Currently Sampling?` &lt;chr&gt;, Notes &lt;chr&gt;\n\n\n(code) preview the raw data\ninspectData(\"data/Unified_WQ_Database_1995-2022.csv\")\n\n\n[1] \"data/Unified_WQ_Database_1995-2022.csv\"\n\n\nNew names:\nRows: 612830 Columns: 16\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(10): Source, Site, Latitude, Longitude, Parameter, Value, Units, Trend ... dbl\n(6): ...1, Month, Year, Total Depth, Sample Depth, Start Date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\n\n# A tibble: 6 × 16\n   ...1 Source Site  Latitude Longitude Month  Year Parameter     Value    Units\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;\n1     1 AOML   1     25.64330 -80.12670     1  1998 Chlorophyll a 1.00488  ug/L \n2     2 AOML   2     25.64330 -80.10500     1  1998 Chlorophyll a 0.555864 ug/L \n3     3 AOML   3     25.63830 -80.08330     1  1998 Chlorophyll a 0.695148 ug/L \n4     4 AOML   4     25.10830 -80.38000     1  1998 Chlorophyll a 0.426756 ug/L \n5     5 AOML   5     25.09330 -80.35330     1  1998 Chlorophyll a 0.66462  ug/L \n6     6 AOML   6     25.06330 -80.31500     1  1998 Chlorophyll a 0.26712  ug/L \n# ℹ 6 more variables: `Total Depth` &lt;dbl&gt;, `Sample Depth` &lt;dbl&gt;,\n#   `Trend Analysis` &lt;chr&gt;, Continuous &lt;chr&gt;, `Start Date` &lt;dbl&gt;,\n#   `End Date` &lt;chr&gt;\n\n\nHere is a summarizing table of what I see in each file we were provided:\n\n\n\n\n\n\n\n\n\nfilename\ngeospatial info\ndt info\n\n\n\n\n\nMerged_*.csv\ndepth?+source+site\nMM-YYYY\n\n\n\nstation_sampling_periods_for_all_programs.csv\nlat+lon+source+site\n\nstart+end year + still sampling\n\n\nUnified_WQ_Database_1995-2022.csv\nlat+lon+source+site\nMM-YYYY\nstart+end + still sampling\n\n\n\nSo… in theory Unified_WQ_Database_1995-2022.csv contains everything we could need.\n\nExploratory analyses\nA skim view of the data as it loads in:\n\n\n(code) skim the data\ndata &lt;- readr::read_csv(\"data/Unified_WQ_Database_1995-2022.csv\")\n\nskimr::skim(data)\n\n\n\nData summary\n\n\nName\ndata\n\n\nNumber of rows\n612830\n\n\nNumber of columns\n16\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n10\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSource\n0\n1.00\n3\n11\n0\n9\n0\n\n\nSite\n0\n1.00\n1\n28\n0\n1411\n0\n\n\nLatitude\n5462\n0.99\n8\n8\n0\n4739\n0\n\n\nLongitude\n5496\n0.99\n9\n9\n0\n5495\n0\n\n\nParameter\n0\n1.00\n6\n24\n0\n11\n0\n\n\nValue\n29273\n0.95\n1\n13\n0\n88595\n0\n\n\nUnits\n968\n1.00\n2\n9\n0\n13\n0\n\n\nTrend Analysis\n154\n1.00\n2\n3\n0\n2\n0\n\n\nContinuous\n154\n1.00\n2\n3\n0\n2\n0\n\n\nEnd Date\n154\n1.00\n4\n7\n0\n15\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\n…1\n0\n1.00\n360505.76\n206864.14\n1\n182543.25\n365608.5\n537933.8\n717536.00\n▇▇▇▇▇\n\n\nMonth\n63\n1.00\n6.54\n3.43\n1\n4.00\n7.0\n10.0\n12.00\n▇▅▅▅▇\n\n\nYear\n63\n1.00\n2012.03\n7.92\n1995\n2006.00\n2013.0\n2019.0\n2022.00\n▂▃▅▃▇\n\n\nTotal Depth\n345777\n0.44\n10.21\n10.14\n0\n3.75\n7.3\n12.0\n120.57\n▇▁▁▁▁\n\n\nSample Depth\n132515\n0.78\n3.62\n13.44\n0\n0.50\n0.5\n3.2\n2494.00\n▇▁▁▁▁\n\n\nStart Date\n154\n1.00\n1999.21\n11.08\n1988\n1988.00\n1998.0\n2005.0\n2022.00\n▇▃▃▁▃\n\n\n\n\n\nThe Value is reading in as “Character” when it should be “Numeric”. We can convert it and view the rows that are being lost because they read as non-numeric:\n\n\n(code) view bad rows\ndata &lt;- getData()  # the getData in getData.R reads and converts the Value col \n\n\nNew names:\n• `` -&gt; `...1`\n\n\nWarning in getData(): NAs introduced by coercion\n\n\n(code) view bad rows\nna_rows &lt;- is.na(data$Value) & !is.na(data$Value_orig)\nna_introduced_rows &lt;- data[na_rows, ]\n\nprint(na_introduced_rows)\n\n\n# A tibble: 4,989 × 17\n    ...1 Source Site    Latitude Longitude Month  Year Parameter     Value Units\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;\n 1 10172 AOML   AMI4    27.38060 -83.03420     8  2022 Chlorophyll a    NA ug/L \n 2 10178 AOML   V3      27.03630 -82.61340     8  2022 Chlorophyll a    NA ug/L \n 3 60251 FIU    Sta 351 24.69170 -81.79170     1  2011 Chlorophyll a    NA ug/L \n 4 60252 FIU    Sta 351 24.69170 -81.79170     4  2011 Chlorophyll a    NA ug/L \n 5 60253 FIU    Sta 351 24.69170 -81.79170     7  2011 Chlorophyll a    NA ug/L \n 6 60309 FIU    Sta 352 24.77580 -81.78300     1  2011 Chlorophyll a    NA ug/L \n 7 60310 FIU    Sta 352 24.77580 -81.78300     4  2011 Chlorophyll a    NA ug/L \n 8 60311 FIU    Sta 352 24.77580 -81.78300     7  2011 Chlorophyll a    NA ug/L \n 9 60367 FIU    Sta 353 24.85830 -81.77670     1  2011 Chlorophyll a    NA ug/L \n10 60368 FIU    Sta 353 24.85830 -81.77670     4  2011 Chlorophyll a    NA ug/L \n# ℹ 4,979 more rows\n# ℹ 7 more variables: `Total Depth` &lt;dbl&gt;, `Sample Depth` &lt;dbl&gt;,\n#   `Trend Analysis` &lt;chr&gt;, Continuous &lt;chr&gt;, `Start Date` &lt;dbl&gt;,\n#   `End Date` &lt;chr&gt;, Value_orig &lt;chr&gt;\n\n\nThe unique problem values in the “Values” column:\n\n\n(code) view bad Value values\nprint(unique(na_introduced_rows$Value_orig))\n\n\n[1] \"Spilled\"       \"TRUE\"          \"FALSE\"         \"*Non-detect\"  \n[5] \"*Not Reported\" \"ND\""
  },
  {
    "objectID": "parameters.html",
    "href": "parameters.html",
    "title": "Parameter Reports",
    "section": "",
    "text": "(code) import libraries & functions\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  glue,\n  quarto\n)\nsource(\"R/getData.R\")\ndata &lt;- getData()\n\n\n\nParameters\nUsing the clean data after completing Sites QC.\nAvailable parameters:\n\n\n(code) view unique parameters\n# print unique values in `Parameter` column\nunique_parameters &lt;- unique(data$Parameter)\nprint(unique_parameters)\n\n\n [1] \"Chlorophyll a\"            \"Ammonium (N)\"            \n [3] \"Nitrate-Nitrite (N)\"      \"Nitrite (N)\"             \n [5] \"Nitrate (N)\"              \"Orthophosphate (P)\"      \n [7] \"Silica\"                   \"Nitrogen- Total\"         \n [9] \"Nitrogen- Total Kjeldahl\" \"Phosphorus- Total\"       \n[11] \"Turbidity\"               \n\n\n(code) view unique parameters\n# # create a violin plot of `Value` grouped by each `Parameter`\n# NOTE: this ran for 20min and never finished\n# ggplot2::ggplot(df, aes(x=Parameter, y=Value)) +\n#     geom_violin(trim=FALSE) +\n#     theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n#     labs(title=\"Violin Plot of Values by Parameter\",\n#          x=\"Parameter\",\n#          y=\"Value\")\n\n# TODO: print n observations per parameter\n\n\n\n\nTODO: filter rows with param values too high\n\n\nprint table of param bounds\n# NOTE: each row should *exactly* match the unique_parameters above\ncsvPath &lt;- \"parameter_bounds.csv\"\n\n# Read the CSV data\ndata &lt;- read.csv(csvPath, stringsAsFactors = FALSE)\n\n# Print the data frame\nprint(data)\n\n\n                       param min   max\n1  Ammonium (N)                0   6.0\n2  Nitrate (N)                 0  10.0\n3  Chlorophyll a               0  75.0\n4  Nitrate-Nitrite (N)         0   8.0\n5  Nitrite (N)                 0   0.5\n6  Nitrogen- Total             0   6.0\n7  Nitrogen- Total Kjeldahl    0   5.0\n8  Orthophosphate (P)          0  10.0\n9  Phosphorus- Total           0   2.0\n10 Silica                      0  20.0\n11 Turbidity                   0 200.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmmonium (N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChlorophyll a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNitrate (N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNitrate-Nitrite (N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNitrite (N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNitrogen- Total\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNitrogen- Total Kjeldahl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrthophosphate (P)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhosphorus- Total\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSilica\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTurbidity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]